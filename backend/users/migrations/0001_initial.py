# Generated by Django 4.2.7 on 2025-09-01 14:17

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Required. 100 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=100, unique=True)),
                ('email', models.EmailField(help_text='Required. A valid email address.', max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_alumni', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Badge name', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Badge description')),
                ('badge_type', models.CharField(choices=[('participation', 'Participation'), ('achievement', 'Achievement'), ('milestone', 'Milestone'), ('special', 'Special Recognition')], default='achievement', max_length=20)),
                ('icon_url', models.URLField(blank=True, help_text='Badge icon URL')),
                ('required_points', models.IntegerField(default=0, help_text='Points required to earn this badge')),
                ('required_actions', models.JSONField(blank=True, default=list, help_text='Required actions to earn this badge')),
                ('is_active', models.BooleanField(default=True)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'users_badge',
                'ordering': ['required_points', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('academic', models.JSONField(blank=True, default=dict, help_text='Academic information: institution, graduation_year, degree_program, current_status')),
                ('professional', models.JSONField(blank=True, default=dict, help_text='Professional information: company, role, experience_level, industry')),
                ('bio', models.TextField(blank=True, help_text='User biography')),
                ('avatar', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='avatars/')),
                ('interests', models.JSONField(blank=True, default=list, help_text='List of user interests as strings')),
                ('social_links', models.JSONField(blank=True, default=dict, help_text='Social media links: linkedin, github, twitter, etc.')),
                ('role', models.CharField(choices=[('listener', 'Listener'), ('moderator', 'Moderator'), ('speaker', 'Speaker')], default='listener', max_length=20)),
                ('total_points', models.IntegerField(default=0, help_text='Total gamification points')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'db_table': 'users_profile',
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('earned', 'Earned'), ('spent', 'Spent'), ('bonus', 'Bonus'), ('penalty', 'Penalty')], default='earned', max_length=20)),
                ('source', models.CharField(choices=[('session_hosted', 'Session Hosted'), ('session_attended', 'Session Attended'), ('session_moderated', 'Session Moderated'), ('article_published', 'Article Published'), ('community_contribution', 'Community Contribution'), ('mentorship', 'Mentorship'), ('badge_earned', 'Badge Earned'), ('admin_adjustment', 'Admin Adjustment')], help_text='Source of the points transaction', max_length=50)),
                ('points', models.IntegerField(help_text='Points amount (positive for earned, negative for spent)')),
                ('balance_after', models.IntegerField(help_text='User balance after this transaction')),
                ('description', models.TextField(help_text='Transaction description')),
                ('reference_id', models.UUIDField(blank=True, help_text='Reference to related object (session, article, etc.)', null=True)),
                ('reference_type', models.CharField(blank=True, help_text='Type of reference object', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Points Transaction',
                'verbose_name_plural': 'Points Transactions',
                'db_table': 'users_points_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_sessions', models.BooleanField(default=True, help_text='Email notifications for sessions')),
                ('email_recordings', models.BooleanField(default=True, help_text='Email notifications for recordings')),
                ('email_feedback', models.BooleanField(default=True, help_text='Email notifications for feedback')),
                ('email_community', models.BooleanField(default=True, help_text='Email notifications for community activity')),
                ('email_milestones', models.BooleanField(default=True, help_text='Email notifications for milestones')),
                ('email_mentorship', models.BooleanField(default=True, help_text='Email notifications for mentorship')),
                ('email_career', models.BooleanField(default=True, help_text='Email notifications for career opportunities')),
                ('in_app_sessions', models.BooleanField(default=True, help_text='In-app notifications for sessions')),
                ('in_app_recordings', models.BooleanField(default=True, help_text='In-app notifications for recordings')),
                ('in_app_feedback', models.BooleanField(default=True, help_text='In-app notifications for feedback')),
                ('in_app_community', models.BooleanField(default=True, help_text='In-app notifications for community activity')),
                ('in_app_milestones', models.BooleanField(default=True, help_text='In-app notifications for milestones')),
                ('in_app_mentorship', models.BooleanField(default=True, help_text='In-app notifications for mentorship')),
                ('in_app_career', models.BooleanField(default=True, help_text='In-app notifications for career opportunities')),
                ('quiet_hours_start', models.TimeField(blank=True, help_text='Start time for quiet hours (no notifications)', null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='End time for quiet hours (no notifications)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Preference',
                'verbose_name_plural': 'Notification Preferences',
                'db_table': 'users_notification_preference',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('session_reminder', 'Session Reminder'), ('session_scheduled', 'New Session Scheduled'), ('recording_available', 'Recording Available'), ('feedback_received', 'Feedback Received'), ('community_activity', 'Community Activity'), ('milestone_achieved', 'Milestone Achieved'), ('badge_earned', 'Badge Earned'), ('mentorship_update', 'Mentorship Update'), ('career_opportunity', 'Career Opportunity')], help_text='Type of notification', max_length=50)),
                ('title', models.CharField(help_text='Notification title', max_length=255)),
                ('message', models.TextField(help_text='Notification message')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('is_email_sent', models.BooleanField(default=False)),
                ('action_url', models.URLField(blank=True, help_text='URL to navigate to when notification is clicked')),
                ('reference_id', models.UUIDField(blank=True, help_text='Reference to related object', null=True)),
                ('reference_type', models.CharField(blank=True, help_text='Type of reference object', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'users_notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('earned_for', models.TextField(blank=True, help_text='What the user did to earn this badge')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='users.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'db_table': 'users_user_badge',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='AlumniVerification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('institution', models.CharField(help_text='Educational institution name', max_length=255)),
                ('graduation_year', models.IntegerField(help_text='Year of graduation')),
                ('degree_program', models.CharField(help_text='Degree program or major', max_length=255)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('verification_method', models.CharField(choices=[('linkedin', 'LinkedIn'), ('manual', 'Manual Upload'), ('email', 'Email')], max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_data', models.JSONField(blank=True, default=dict, help_text='Additional verification data (e.g., LinkedIn profile URL, document metadata)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verifications_approved', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alumni Verification',
                'verbose_name_plural': 'Alumni Verifications',
                'db_table': 'users_alumni_verification',
                'unique_together': {('user', 'institution', 'graduation_year')},
            },
        ),
    ]
